WINDOWS DEV ENV SETUP — PYTHON 3.11 (NO ADMIN), VENV, AND WHEELS
================================================================

Audience
--------
New contributors on Windows without admin rights.

Goal
----
Provide a reproducible, admin-free Python 3.11 x64 environment that reliably installs numpy/pandas from wheels, avoiding compiler toolchains and cloud-sync lockups.

Summary (TL;DR)
---------------
1) Use the official Windows **embeddable** CPython 3.11 x64 under your user folder.
2) Add `import site` to `python311._pth` (no BOM) so packages work.
3) Bootstrap **pip**, then install **virtualenv**.
4) Create the project virtual environment **outside cloud-synced folders**: `C:\aqf311\.venv`.
5) Use that venv to install dependencies *from wheels*, then run the project.

Why this approach?
------------------
- Admin installs are blocked by IT.
- pandas/numpy wheels exist for **Python 3.11 x64** (no Visual Studio needed).
- Google Drive/OneDrive can lock files mid-install; putting the venv in `C:\aqf311\.venv` avoids that.
- This is repeatable on fresh laptops.

Step-by-step (one command at a time)
------------------------------------

A) Get the embeddable Python 3.11 x64 under your user profile
-------------------------------------------------------------
- Download in a browser:
  • https://www.python.org/ftp/python/3.11.9/python-3.11.9-embed-amd64.zip
  • https://bootstrap.pypa.io/get-pip.py

- Unzip the Python ZIP to:  C:\Users\<you>\Apps\python311-embed
  (You should now see `python.exe`, `python311.dll`, `python311._pth`, etc.)

- Open `C:\Users\<you>\Apps\python311-embed\python311._pth` and make it EXACTLY:
    python311.zip
    .
    import site
  (Ensure no hidden BOM at the start; save as plain UTF-8 or ASCII.)

- Quick check:
    C:\Users\<you>\Apps\python311-embed\python.exe -V
  Expected: Python 3.11.9

B) Add pip and virtualenv
-------------------------
- Install pip into this embedded Python:
    C:\Users\<you>\Apps\python311-embed\python.exe C:\Users\<you>\AppData\Local\Temp\get-pip.py

- Verify:
    C:\Users\<you>\Apps\python311-embed\python.exe -m pip -V

- Install virtualenv:
    C:\Users\<you>\Apps\python311-embed\python.exe -m pip install --upgrade pip setuptools wheel
    C:\Users\<you>\Apps\python311-embed\python.exe -m pip install virtualenv

C) Create the project venv OUTSIDE cloud-sync
---------------------------------------------
- Create:    C:\aqf311\.venv
- Command:
    C:\Users\<you>\Apps\python311-embed\python.exe -m virtualenv C:\aqf311\.venv

- Verify Python & arch:
    C:\aqf311\.venv\Scripts\python.exe -c "import sys,struct,platform; print(sys.version); print(struct.calcsize('P')*8, platform.machine())"
  Expected: 3.11.x and "64 AMD64"

D) Install dependencies (wheels first), from the project repo
------------------------------------------------------------
- Use a short local TEMP/cache to avoid Drive locks:
    mkdir C:\Temp\pip-cache 2>NUL
    set TEMP=C:\Temp
    set TMP=C:\Temp
    set PIP_CACHE_DIR=C:\Temp\pip-cache

- Install core tooling and heavy wheels:
    C:\aqf311\.venv\Scripts\python.exe -m pip install --upgrade pip setuptools wheel
    C:\aqf311\.venv\Scripts\python.exe -m pip install --only-binary=:all: numpy
    C:\aqf311\.venv\Scripts\python.exe -m pip install --only-binary=:all: pandas

- Install the rest (without re-resolving numpy/pandas):
    C:\aqf311\.venv\Scripts\python.exe -m pip install -r "G:\My Drive\sync\air quality forecast\Git_repo\requirements.txt" --no-deps

- Final check:
    C:\aqf311\.venv\Scripts\python.exe -c "import pandas as pd,numpy as np; print('pandas', pd.__version__, '| numpy', np.__version__)"

Daily usage
-----------
- From the repo root:
    "G:\My Drive\sync\air quality forecast\Git_repo"> C:\aqf311\.venv\Scripts\python.exe scripts\smoke_test.py
  Or create a helper script once:
    # repo\scripts\py.ps1
    & "C:\aqf311\.venv\Scripts\python.exe" $args

Notes & troubleshooting
-----------------------
- If pip errors with `[Errno 2] No such file or directory` while installing in a synced folder, make sure your venv is in `C:\aqf311\.venv` and TEMP is `C:\Temp`.
- If pip can’t reach wheels due to a corporate mirror, temporarily force the public index:
    ...\python.exe -m pip install --index-url https://pypi.org/simple --timeout 120 --retries 3 numpy pandas
- If `venv` is missing in the embedded build, use `virtualenv` (as above).
- If you ever need to reset, delete `C:\aqf311\.venv` and redo section C/D.

Maintenance
-----------
- Upgrade tools:
    C:\aqf311\.venv\Scripts\python.exe -m pip install --upgrade pip setuptools wheel
- Update deps:
    C:\aqf311\.venv\Scripts\python.exe -m pip install -r requirements.txt
- Remove env:
    rmdir /s /q C:\aqf311\.venv

Appendix: Why not Python 3.14?
------------------------------
- At the time of writing, pandas wheels for 3.14 weren’t available, which forces source builds on Windows and requires Visual Studio Build Tools. Our setup locks to 3.11 to ensure wheels-only installs.


# Environment Variable Setup & .env Workflow – PM₂.₅ Forecasting Project

## 1. Purpose
This document explains how the project’s `.env` and `.env.example` files work,
where they are stored, and how they interact with the local runtime environment.

---

## 2. File Locations

### `.env.example` (template)
- Path in repo: `config/env/.env.example`
- Versioned in Git.
- Contains **example values** for all required environment variables:
  ```
  DATA_ROOT=C:\path\to\data
  MODELS_ROOT=C:\path\to\models
  CACHE_ROOT=C:\path\to\.cache
  ```
- Does not contain secrets; safe to commit.
- Acts as a **template** for creating your personal `.env` file.

### `.env` (local config)
- Path: `config/env/.env` **or** (for local convenience) repo root `.env`
- **Git-ignored** – never committed.
- Contains machine-specific absolute paths (or cloud URIs) for:
  - `DATA_ROOT` – directory where raw/curated data is stored locally
  - `MODELS_ROOT` – directory where trained model artifacts are stored
  - `CACHE_ROOT` – local cache for temporary downloads or API calls
- Required for both local runs and CI smoke tests.

---

## 3. How It Works

1. **Python-dotenv** loads `.env` automatically at runtime (see `scripts/smoke_test.py`).
2. The smoke test checks for critical vars (`DATA_ROOT`, `MODELS_ROOT`) before running.
3. All file I/O in Stage 1 uses these variables to build paths via `fsspec`.
   - Example: `file://${DATA_ROOT}/raw/observations/...`
4. By editing `.env`, you can switch between local paths and remote storage (e.g. `s3://bucket/...`) without changing code.

---

## 4. Setup Steps (Windows PowerShell, no admin rights)

```powershell
# 1. Ensure venv is active
& "C:\aqf311\.venv\Scripts\python.exe" -m pip list

# 2. Create local data/model/cache dirs OUTSIDE sync folders
New-Item -ItemType Directory -Force -Path "C:\aqf311\data","C:\aqf311\models","C:\aqf311\.cache" | Out-Null

# 3. Copy template and edit
Copy-Item "config\env\.env.example" ".env" -Force
notepad .env  # Update DATA_ROOT, MODELS_ROOT, CACHE_ROOT paths

# Example contents:
# DATA_ROOT=C:\aqf311\data
# MODELS_ROOT=C:\aqf311\models
# CACHE_ROOT=C:\aqf311\.cache

# 4. Test
& "C:\aqf311\.venv\Scripts\python.exe" scripts\smoke_test.py
# Expect: Smoke test OK.
```

---

## 5. CI & Cloud Considerations
- In CI, `.env` is generated from `.env.example` with ephemeral paths.
- In cloud, `.env` will point to `s3://` or similar URIs but **use the same keys**.
- No secrets are stored in `.env`; if needed later, they will be injected via
  a secure secrets manager.

---

## 6. Maintenance
- Keep `.env.example` updated whenever a new environment variable is introduced.
- Never commit your local `.env`.
- Verify `.env` loads correctly after repo updates by re-running the smoke test.

---

**Last updated:** 2025-08-14


ENVIRONMENT_SETUP_SUMMARY.txt
================================

Purpose
-------
Canonical reference describing **where everything lives** on your Windows machine,
**how to run** the Stage 1 project reliably, and **what to avoid**. Written for both
humans and LLMs. Keep this file in the repo docs.

------------------------------------------------------------
A. CURRENT LOCATIONS (Windows)
------------------------------------------------------------
1) GitHub repository (source of truth)
   - Path: G:\My Drive\sync\air quality forecast\Git_repo
   - Stage 1 subproject: G:\My Drive\sync\air quality forecast\Git_repo\stage1
   - You COMMIT & PUSH from here.

2) Python environment (only venv)
   - Path: C:\aqf311\.venv
   - Created with Python 3.11 (embeddable) + virtualenv (no admin rights).

3) Runtime mirror for execution (recommended)
   - Path: C:\aqf311\repo\stage1
   - Why: avoids Google Drive/OneDrive file-locks during installs & runs.

4) Local storage (not in git)
   - DATA_ROOT  : C:\aqf311\data
   - MODELS_ROOT: C:\aqf311\models
   - CACHE_ROOT : C:\aqf311\.cache
   - Optional pip cache: C:\Temp\pip-cache

5) Key files and folders inside stage1
   - src\stage1_forecast\env.py  ← robust .env loader
   - scripts\smoke_test.py       ← prints DATA_ROOT / MODELS_ROOT, then “Smoke test OK.”
   - apps\tools\validate_cities.py, generate_cli_reference.py
   - config\cities\*.yml, config\schemas\*.json
   - config\env\.env.example (template only, no secrets)

------------------------------------------------------------
B. HOW THE .ENV IS FOUND
------------------------------------------------------------
The loader searches in this order:
  1) <repo_root>\.env
  2) <repo_root>\config\env\.env
  3) First .env found by python-dotenv walking up from the current directory
It prints which file it loaded, then echoes the key paths.

Rule of thumb:
- Keep a REAL .env only in the tree you actually run from (usually C:\aqf311\repo\stage1).
- Keep ONLY the template in git: stage1\config\env\.env.example

------------------------------------------------------------
C. TWO WAYS TO RUN
------------------------------------------------------------
Recommended (Mirror-and-Run)
1) Edit & commit on G:
   cd "G:\My Drive\sync\air quality forecast\Git_repo\stage1"
   git add -A
   git commit -m "stage1: <change>"
   git push
2) Mirror to C: (no git on C:):
   robocopy "G:\My Drive\sync\air quality forecast\Git_repo\stage1" "C:\aqf311\repo\stage1" /MIR /XD .git .venv __pycache__ /XF *.pyc
3) Run:
   cd "C:\aqf311\repo\stage1"
   C:\aqf311\.venv\Scripts\python.exe scripts\smoke_test.py

Direct-from-Repo (no mirror)
- Use a tiny runner that injects src/ via PYTHONPATH so you don’t need editable installs in G:
  .\scripts\py.ps1 .\scripts\smoke_test.py

------------------------------------------------------------
D. QUICK VERIFICATION COMMANDS
------------------------------------------------------------
# Show active Python (should be C:\aqf311\.venv\...)
C:\aqf311\.venv\Scripts\python.exe -c "import sys; print(sys.executable)"

# Prove .env is discovered
C:\aqf311\.venv\Scripts\python.exe -c "import os; from dotenv import find_dotenv,load_dotenv; p=find_dotenv(usecwd=True); print('found:', p); load_dotenv(p); print('DATA_ROOT=', os.getenv('DATA_ROOT'))"

# Full smoke test
cd "C:\aqf311\repo\stage1"
C:\aqf311\.venv\Scripts\python.exe .\scripts\smoke_test.py

------------------------------------------------------------
E. DO / DON’T
------------------------------------------------------------
DO
- Use ONE venv: C:\aqf311\.venv
- Keep .env out of git; keep a template at stage1\config\env\.env.example
- Run from C: mirror for reliability; commit from G: repo
- Use Windows PowerShell commands one-per-line

DON’T
- Don’t keep any .venv inside G:\…\Git_repo (Drive locks & bloat)
- Don’t commit .env or any data/models to git
- Don’t rely on editable installs in G:\… (use mirror or PYTHONPATH runner)

------------------------------------------------------------
F. CLEANUP OF REDUNDANT ENVIRONMENTS
------------------------------------------------------------
If you see a venv under G:\…\Git_repo (e.g., .venv, .venv311), remove it:
  Remove-Item -LiteralPath "G:\My Drive\sync\air quality forecast\Git_repo\stage1\.venv" -Recurse -Force

Ensure .gitignore prevents future accidents:
  # local virtual envs
  .venv/
  .venv*/
  # local env files
  .env
  config/env/.env

------------------------------------------------------------
G. COMMON TROUBLESHOOTING
------------------------------------------------------------
Problem: pip upgrade/install fails with “[Errno 2]” or file-in-use
Fix    : Don’t install in G:. Use C:\aqf311\.venv and run from C:\aqf311\repo\stage1

Problem: Smoke test shows DATA_ROOT=None / MODELS_ROOT=None
Fix    : Ensure there is a .env in the tree you are running from (e.g., C:\aqf311\repo\stage1\.env);
         verify with the quick ‘find_dotenv’ command above.

Problem: Import errors for stage1_forecast
Fix    : Ensure src\stage1_forecast\ exists with __init__.py and env.py; if running from G:, use scripts\py.ps1.

------------------------------------------------------------
H. APPENDIX: ONE-TIME SETUP (No Admin)
------------------------------------------------------------
1) Install Python 3.11 (embeddable) under C:\Users\<you>\Apps\python311-embed; enable 'import site' in python311._pth
2) Bootstrap pip & virtualenv:
   C:\Users\<you>\Apps\python311-embed\python.exe C:\path\to\get-pip.py
   C:\Users\<you>\Apps\python311-embed\python.exe -m pip install virtualenv
3) Create venv:
   C:\Users\<you>\Apps\python311-embed\python.exe -m virtualenv C:\aqf311\.venv
4) Install project deps from the repo (run from stage1):
   C:\aqf311\.venv\Scripts\python.exe -m pip install -r requirements.txt
   C:\aqf311\.venv\Scripts\python.exe -m pip install -e .
5) Create .env (never commit):
   copy config\env\.env.example → .env
   set DATA_ROOT, MODELS_ROOT, CACHE_ROOT to C:\aqf311\…

------------------------------------------------------------
END
------------------------------------------------------------
